@printf(x: str): int
@exit(x: int)

#[primitive(type = :binary, precedence = 30)]
fc ?(a: float, b: float): bool
    if a == 1.0
        if b == 0.0
            return true
        end
    end

    return false
end

#[primitive(type = :binary, precedence = 8)]
fc &&(a: bool, b: bool): bool
    if a == b
        return true
    end

    return false
end

#[primitive(type = :unary, precedence = 8)]
fc !(a: bool): bool
    if a
        return false
    end

    return true
end

fc main
/*
    loop i, v in "IterThroughMe\n"
        printf(v)
    end
*/

/* TODO: this won't work because unaryParse treats & as unary operator
    if 1.0 == 0.1 && 1.0 == 0.1
*/
    if (1. == 1.0) && (1.0 != 0.1)
        printf("true\n")
    else
        printf("false\n")
    end

   // "aa" == "bb"

 //   add(1.0, 0.1)
  //  printf("Hi\n")
end

fc add(a: float, b: float): float
    return a + b + 2.0
end